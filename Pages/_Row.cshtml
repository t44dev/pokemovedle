@model _GameModel 
@using PokeMovedle.Models.Moves
@{
    MoveContext ctx = new MoveContext();
    Move move = Model.guessedMove;
    Move correctMove = await ctx.GetMove();

    string Indicator(int? a, int? b) 
    { 
        if (a == b) { return ""; }
        if (a != null && b != null) {
            if (a > b) {
                return "▼";
            }
            if (a < b) {
                return "▲";
            }
        }
        if (a == null && b != null) {
            return "▲";
        }
        if (a != null && b == null) {
            return "▼";
        }
        return "";
    }

    string TableColour<T>(T a, T b) { 
        if (a == null && b == null) return "table-success";
        if (a == null) return "table-danger";
        if (b == null) return "table-danger";
        return a.Equals(b) ? "table-success" : "table-danger";
    }

    async Task<string> MoveCellBadge(PokeType attacker, PokeType defender)
    {
        // TODO: Move cell fix
        float value = 1.0f;
        string colour;
        if (value > 1.0) colour = "bg-info";
        else if (value < 1.0) colour = "bg-warning";
        else colour = "bg-secondary";
        return $"""<span class="badge {colour}">{value}x</span>""";
    }
}

<tr>
    <td class="@TableColour(move.name, correctMove.name)">@Move.FormatName(move.name)</td>
    <td class="@TableColour(move.type, correctMove.type)">@move.type.ToString() @Html.Raw(await MoveCellBadge(move.type, correctMove.type))</td>
    <td class="@TableColour(move.power, correctMove.power)">@move.power @Indicator(move.power, correctMove.power)</td>
    <td class="@TableColour(move.pp, correctMove.pp)">@move.pp @Indicator(move.pp, correctMove.pp)</td>
    <td class="@TableColour(move.accuracy, correctMove.accuracy)">@(move.accuracy != null ? move.accuracy.ToString() + '%' : "") @Indicator(move.accuracy, correctMove.accuracy)</td>
    <td class="@TableColour(move.damageClass, correctMove.damageClass)">@move.damageClass.ToString()</td>
</tr>
