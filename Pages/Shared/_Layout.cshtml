@using PokeMovedle.Models.Moves
@{
    MoveContext ctx = new MoveContext();
    DateTime nextTime = MoveContext.lastTimestamp.AddDays(1);
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - PokeMovedle</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/PokeMovedle.styles.css" asp-append-version="true" />
    <script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
    <meta name="htmx-config" includeAspNetAntiforgeryToken="true" />
</head>
<body>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            2024 - PokeMovedle
        </div>
    </footer>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        const finalTime = new Date("@(nextTime.ToString("u"))");
        const timeout = setInterval(() => {
            if (updateTimer(finalTime)) {
                clearInterval(timeout);
                location.reload();
            }
        }, 1000);
        const forceUpdateTimer = () => updateTimer(finalTime);
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
